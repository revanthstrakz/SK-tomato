#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    $bb chown -R $1:$2 $i;
    $bb find "$i" -type d -exec chmod $3 {} +;
    $bb find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
cleanup() { rm -rf /tmp/anykernel; }
debugging() {
  case $(basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print " ";
      ui_print "Creating debugging archive in zip directory...";
      $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
    ;;
  esac;
}
abort() {
  ui_print "$*";
  debugging;
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  umount /system;
  umount /data 2>/dev/null;
  exit 1;
}

show_progress 1.34 4;
ui_print "****************************************";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
bb=/tmp/anykernel/tools/busybox;
chmod 755 $bb;
$bb chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;

android_ver=$(mount /system; grep "^ro.build.version.release" /system/build.prop | cut -d= -f2; umount /system);
rom=$(mount /system; grep "^ro.modversion" /system/build.prop | cut -d= -f2; umount /system);
sdk=$(mount /system; grep "^ro.build.version.sdk" /system/build.prop | cut -d= -f4; umount /system);

ui_print "************AzurE Minimal Kernel***************";
ui_print "**Detecting ROM.....";
ui_print "**ROM is $rom";
ui_print "**Detecting Android Version.......";
ui_print "**$android_ver detected!!";
ui_print "**SDK $sdk detected!!";
case "$android_ver" in
  "5.0"|"5.1.1"|"6.0"|"6.0.1"|"7.0"|"7.1"|"7.1.1"|"7.1.2") compatibility_string="**Your version is unsupported, Your device will not boot!";;
  "8.0.0"|"8.0"|"8.1.0") compatibility_string="**Your version is supported!";;
esac;
ui_print "$compatibility_string";
ui_print "**Time For Real Installation**";
ui_print "*****************************************************";
ui_print "|          A                  **Super Stable!!      |";
ui_print "|         A A                 **Minimalistic!!      |";
ui_print "|        A   A                                      |";
ui_print "|       A     A               UU    UURrr   Eeeeee  |";
ui_print "|      A       A              UU    UU   r  E       |";
ui_print "|     A aaaaaaa A       Zzzzz UU    UURrr   Eeee    |";
ui_print "|    A           A        Z   UU    UU r    E       |";
ui_print "|   A             A      Z    UU    UU  r   E       |";
ui_print "|  A               A    Z       UUUU        Eeeeee  |";
ui_print "| A                 A  Zzzzzz                       |";
ui_print "|***************************************************|";
ui_print "**Mounting System.....";
ui_print "**System Mounted - Read Only**";
ui_print "**Fetching Build Prop.....";
umount /system 2>/dev/null;
mount -o ro -t auto /system;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "**Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "**Device Detected - $testname";
      match=1;
    fi;
  done;
  ui_print "***************************************************";
  if [ "$match" != 1 ]; then
    abort "**Unsupported device. Aborting...";
  fi;
fi;

ui_print "**Installing AzurE kernel for Oreo ROMs on $testname...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "Pushing modules...";
  mount -o rw,remount -t auto /system;
  $bb cp -rLf /tmp/anykernel/modules/* $root/system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 $root/system/lib/modules;
  chcon -R 'u:object_r:system_file:s0' $root/system/lib/modules;
  mount -o ro,remount -t auto /system;
fi;

debugging;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;
ui_print "**Wipe Dalvik Cache And Cache Now for better Results.....";
ui_print "***********Panchajanya Sarkar****************";

umount /system;
umount /data 2>/dev/null;
ui_print "**Kernel Successfully Flashed On Your Device!!";
ui_print "**Done!";
